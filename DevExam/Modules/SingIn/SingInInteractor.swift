//
//  SingInInteractor.swift
//  DevExam
//
//  Created by Vlad Ralovich on 7.03.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import Security

protocol SingInBusinessLogic
{
    func doSomething(request: SingIn.Something.Request.RequestType)
}

protocol SingInDataStore
{
  var phoneMaskModel: PhoneMaskModel { get set }
}

class SingInInteractor: SingInBusinessLogic, SingInDataStore
{
  var presenter: SingInPresentationLogic?
  var worker: SingInWorker?
    var phoneMaskModel = PhoneMaskModel(phoneMask: "")
  
  // MARK: Do something
  
    func doSomething(request: SingIn.Something.Request.RequestType)
  {
    worker = SingInWorker()
    worker?.doSomeWork()
      
      switch request {
      case .getPhoneMask:
          getPhoneMask()
      case .getFormattedPhoneNumber(let formatNumber):
          presenter?.presentSomething(response: .formatPhomeMask(phoneMask: phoneMaskModel, number: formatNumber))
      case .postSignIn(number: let number, password: let password):
          print("number = \(removeNumberFormat(number: number)), password = \(password)")
          let param: Parameters = [
            "phone" : "\(removeNumberFormat(number: number))",
            "password" : "\(password)"
          ]
          postSignIn(param: param)
      case .searchUser(mask: let mask):
          let phoneMask = PhoneMaskModel(phoneMask: mask)
          let user: (String, String) = searchUser(mask: phoneMask)
          presenter?.presentSomething(response: .presenrtUser(mask: phoneMask, username: user.0, password: user.1))
      }
  }
    
    private func getPhoneMask() {
        AF.request("http://dev-exam.l-tech.ru/api/v1/phone_masks").validate()
            .responseDecodable(of: PhoneMaskModel.self) { response in
                switch response.result {
                case .success(let phoneMask):
                    self.phoneMaskModel = phoneMask
                    DispatchQueue.main.async { [weak self] in
                        self?.presenter?.presentSomething(response: .pesentPhoneMask(phoneMask))
                    }
                    break
                case .failure(let error):
                    print("Error load phone mask = \(error)")
                }
            }
    }
    
    private func postSignIn(param: Parameters) {
        let headers: HTTPHeaders = [.contentType("application/x-www-form-urlencoded")]
        AF.request("http://dev-exam.l-tech.ru/api/v1/auth", method: .post, parameters: param, headers: headers).validate()
            .responseDecodable(of: PostResponseModel.self) { response in
                switch response.result {
                case .success(let ans):
                    print(ans)
                    self.presenter?.presentSomething(response: .presentMainVC)
                    self.saveKeyChain(username: param["phone"] as! String, password: param["password"] as! String)
                case .failure(let error):
                    print("Number or password incorrect = \(error)")
                }
            }
    }
    
    private func removeNumberFormat(number: String) -> String {
            let digits = CharacterSet.decimalDigits
            var text = ""
            for char in number.unicodeScalars {
                if digits.contains(char) {
                    text.append(char.description)
                }
            }
            return text
        }
    
    private func saveKeyChain(username: String, password: String) {
        let attributes: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: username,
            kSecValueData as String: password.data(using: .utf8)!,
        ]
        
        SecItemAdd(attributes as CFDictionary, nil)
    }
    
    private func searchUser(mask: PhoneMaskModel) ->  (String, String) {
        var res = ("", "")
        var username = ""
        // Set query
        if mask.phoneMask.contains("3") {
            username = "375663211234"
        } else if mask.phoneMask.contains("7") {
            username = "79005868675"
        } else if mask.phoneMask.contains("4") {
            username = "449009223321"
        } //так себе поиск
        
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: username,
            kSecMatchLimit as String: kSecMatchLimitOne,
            kSecReturnAttributes as String: true,
            kSecReturnData as String: true,
        ]
        var item: CFTypeRef?

        // Check if user exists in the keychain
        if SecItemCopyMatching(query as CFDictionary, &item) == noErr {
            
            // Extract result
            if let existingItem = item as? [String: Any],
               let username = existingItem[kSecAttrAccount as String] as? String,
               let passwordData = existingItem[kSecValueData as String] as? Data,
               let password = String(data: passwordData, encoding: .utf8) {
                print("found = \(username), \(password)")
                res = (username, password)
            }
        }
        return res
    }
}
