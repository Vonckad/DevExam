//
//  SingInInteractor.swift
//  DevExam
//
//  Created by Vlad Ralovich on 7.03.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol SingInBusinessLogic
{
    func doSomething(request: SingIn.Something.Request.RequestType)
}

protocol SingInDataStore
{
  var phoneMaskModel: PhoneMaskModel { get set }
}

class SingInInteractor: SingInBusinessLogic, SingInDataStore
{
  var presenter: SingInPresentationLogic?
  var worker: SingInWorker?
    var phoneMaskModel = PhoneMaskModel(phoneMask: "")
  
  // MARK: Do something
  
    func doSomething(request: SingIn.Something.Request.RequestType)
  {
    worker = SingInWorker()
    worker?.doSomeWork()
      
      switch request {
      case .getPhoneMask:
          getPhoneMask()
      case .getFormattedPhoneNumber(let formatNumber):
          presenter?.presentSomething(response: .formatPhomeMask(phoneMask: phoneMaskModel, number: formatNumber))
      case .postSignIn(number: let number, password: let password):
          print("number = \(removeNumberFormat(number: number)), password = \(password)")
          let param: Parameters = [
            "phone" : "375663211234",//"\(removeNumberFormat(number: number))",
            "password" : "devExam18"//"\(password)"
          ]
          postSignIn(param: param)
      }
  }
    
    private func getPhoneMask() {
        AF.request("http://dev-exam.l-tech.ru/api/v1/phone_masks").validate()
            .responseDecodable(of: PhoneMaskModel.self) { response in
                switch response.result {
                case .success(let phoneMask):
                    self.phoneMaskModel = phoneMask
                    DispatchQueue.main.async { [weak self] in
                        self?.presenter?.presentSomething(response: .pesentPhoneMask(phoneMask))
                    }
                    break
                case .failure(let error):
                    print("Error load phone mask = \(error)")
                }
            }
    }
    
    private func postSignIn(param: Parameters) {
        let headers: HTTPHeaders = [.contentType("application/x-www-form-urlencoded")]
        AF.request("http://dev-exam.l-tech.ru/api/v1/auth", method: .post, parameters: param, headers: headers).validate(statusCode: 200 ..< 300)
            .responseDecodable(of: PostResponseModel.self) { response in
                switch response.result {
                case .success(let ans):
                    print(ans)
                case .failure(let error):
                    print("Number or password incorrect = \(error)")
                }
            }
    }
    
    private func removeNumberFormat(number: String) -> String {
            let digits = CharacterSet.decimalDigits
            var text = ""
            for char in number.unicodeScalars {
                if digits.contains(char) {
                    text.append(char.description)
                }
            }
            return text
        }
}
